// Generated by CoffeeScript 1.6.1
(function() {
  var $;

  $ = jQuery;

  $(function() {
    var boxHTML, cam, canvas, ctx, directionalLightHTML, extractImageData, getLightHTML, getObjectHTML, height, imgData, nodeHTML, numberOfFinishedWorkers, parseAmbientLight, parseBackgroundColor, parseCameraDiv, parseData, parseLightDiv, parseLights, planeHTML, pointLightHTML, render, sphereHTML, spotLightHTML, startWorker, width, world;
    $("#loadDiv").toggle();
    nodeHTML = $("#nodeHTMLExample").html();
    sphereHTML = $("#sphereHTMLExample").html();
    boxHTML = $("#boxHTMLExample").html();
    planeHTML = $('#planeHTMLExample').html();
    $("#objectsDiv .addButton").click(function() {
      return $(this).parent().parent().append(getObjectHTML($(this).parent().children(".selectObject").val()));
    });
    getObjectHTML = function(className) {
      switch (className) {
        case "Node":
          return nodeHTML;
        case "Sphere":
          return sphereHTML;
        case "Box":
          return boxHTML;
        case "Plane":
          return planeHTML;
        default:
          return className + "not valid";
      }
    };
    pointLightHTML = $("#pointLightExample").html();
    spotLightHTML = $("#spotLightExample").html();
    directionalLightHTML = $("#directionalLightExample").html();
    $("#lightsDiv .addButton").click(function() {
      return $(this).parent().parent().append(getLightHTML($(this).parent().children(".selectLight").val()));
    });
    getLightHTML = function(lightName) {
      switch (lightName) {
        case "PointLight":
          return pointLightHTML;
        case "SpotLight":
          return spotLightHTML;
        case "DirectionalLight":
          return directionalLightHTML;
        default:
          return lightName + "not valid";
      }
    };
    $("#selectCamera").change(function() {
      if (this.value === "PerspectiveCamera") {
        return $("#cameraSpec").html('<label for="camera_alpha">alpha = PI / </label><input id="camera_alpha" value="1" size="2">');
      } else if (this.value === "OrthographicCamera") {
        return $("#cameraSpec").html('<label for="camera_s">s = </label><input id="camera_s" value="1" size="2">');
      } else {
        return alert("Fail");
      }
    });
    parseCameraDiv = function() {
      var aOrS, e, g, t;
      e = new Point3($("#camera_e_x").val(), $("#camera_e_y").val(), $("#camera_e_z").val());
      g = new Vector3($("#camera_g_x").val(), $("#camera_g_y").val(), $("#camera_g_z").val());
      t = new Vector3($("#camera_t_x").val(), $("#camera_t_y").val(), $("#camera_t_z").val());
      aOrS = $("#cameraSpec input")[0].value;
      if ($("#selectCamera")[0].value === "PerspectiveCamera") {
        return new PerspectiveCamera(e, g, t, aOrS);
      } else if ($("#selectCamera")[0].value === "OrthographicCamera") {
        return new OrthographicCamera(e, g, t, aOrS);
      }
    };
    canvas = document.getElementById("mainCanvas");
    ctx = canvas.getContext("2d");
    ctx.fillStyle = "white";
    width = canvas.width;
    height = canvas.height;
    ctx.fillRect(0, 0, width, height);
    imgData = ctx.getImageData(0, 0, width, height);
    numberOfFinishedWorkers = 0;
    cam = null;
    world = null;
    parseAmbientLight = function() {
      var ambientDiv;
      ambientDiv = $("#ambientLight");
      return new Color(parseFloat($(ambientDiv).children(".redInput").val()), parseFloat($(ambientDiv).children(".greenInput").val()), parseFloat($(ambientDiv).children(".blueInput").val()));
    };
    parseBackgroundColor = function() {
      var worldDiv;
      worldDiv = $("#worldDiv");
      return new Color(parseFloat($(worldDiv).children(".redInput").val()), parseFloat($(worldDiv).children(".greenInput").val()), parseFloat($(worldDiv).children(".blueInput").val()));
    };
    parseLights = function() {
      var lightDiv, lightDivs, _i, _len, _results;
      lightDivs = $("#lightsDiv").children("div");
      _results = [];
      for (_i = 0, _len = lightDivs.length; _i < _len; _i++) {
        lightDiv = lightDivs[_i];
        if ($(lightDiv).children(".lightCheck").is(":checked")) {
          _results.push(parseLightDiv(lightDiv));
        }
      }
      return _results;
    };
    parseLightDiv = function(lightDiv) {
      var color, direction, lightClass, position, shadows;
      lightClass = $(lightDiv).attr("class");
      color = new Color(parseFloat($(lightDiv).children(".redInput").val()), parseFloat($(lightDiv).children(".greenInput").val()), parseFloat($(lightDiv).children(".blueInput").val()));
      shadows = $(lightDiv).children(".lightCheck").is(":checked");
      position = new Point3(parseFloat($(lightDiv).children(".posX").val()), parseFloat($(lightDiv).children(".posY").val()), parseFloat($(lightDiv).children(".posZ").val()));
      if (lightClass === "pointLight") {
        return new PointLight(color, shadows, position);
      }
      direction = new Vector3(parseFloat($(lightDiv).children(".dirX").val()), parseFloat($(lightDiv).children(".dirY").val()), parseFloat($(lightDiv).children(".dirZ").val()));
      if (lightClass === "directionalLight") {
        return new DirectionalLight(color, shadows, direction);
      }
      return new SpotLight(color, shadows, position, direction, Math.PI / parseFloat($(lightDiv).children(".halfAngle").val()));
    };
    parseData = function() {
      var objects;
      objects = [new Node(Transform.Scaling(1, 1, 1), [new Sphere(new PhongMaterial(new Color(1, 0, 0), new Color(1, 1, 1), 20))], null)];
      cam = parseCameraDiv();
      return world = new World(parseBackgroundColor(), objects, parseLights(), parseAmbientLight(), parseFloat($("#worldDiv").children(".indexOfRefraction").val()));
    };
    startWorker = function(number, numberOfWorkers) {
      var endH, startH, worker;
      startH = width / numberOfWorkers * number;
      endH = startH + width / numberOfWorkers;
      worker = new Worker('engine.js');
      worker.addEventListener('message', function(e) {
        extractImageData(e.data.imgData, 0, startH, 500, endH);
        if (numberOfWorkers === ++numberOfFinishedWorkers) {
          return $("#loadDiv").toggle();
        }
      }, false);
      return worker.postMessage({
        startH: startH,
        startW: 0,
        endH: endH,
        endW: 500,
        width: width,
        height: height
      });
    };
    render = function(webWorkers) {
      var c, i, tracer, x, y, _i, _j, _k, _results;
      if (webWorkers) {
        $("#loadDiv").toggle();
        numberOfFinishedWorkers = 0;
        _results = [];
        for (i = _i = 0; _i <= 1; i = ++_i) {
          _results.push(startWorker(i, 2));
        }
        return _results;
      } else {
        tracer = new Tracer(world);
        for (x = _j = 0; _j <= width; x = _j += 1) {
          for (y = _k = 0; _k <= height; y = _k += 1) {
            c = tracer.colorFor(cam.rayFor(width, height, x, y));
            imgData.data[(x * height + height - y - 1) * 4 + 0] = c.r * 255.0;
            imgData.data[(x * height + height - y - 1) * 4 + 1] = c.g * 255.0;
            imgData.data[(x * height + height - y - 1) * 4 + 2] = c.b * 255.0;
          }
        }
        return ctx.putImageData(imgData, 0, 0);
      }
    };
    extractImageData = function(newImgData, sx, sy, ex, ey) {
      var x, y, _i, _j;
      for (x = _i = sx; _i <= ex; x = _i += 1) {
        for (y = _j = sy; _j <= ey; y = _j += 1) {
          imgData.data[(x * height + y) * 4 + 0] = newImgData[(x * height + y) * 4 + 0];
          imgData.data[(x * height + y) * 4 + 1] = newImgData[(x * height + y) * 4 + 1];
          imgData.data[(x * height + y) * 4 + 2] = newImgData[(x * height + y) * 4 + 2];
        }
      }
      return ctx.putImageData(imgData, 0, 0);
    };
    return $("#goButton").click(function() {
      parseData();
      return render($("#webworkers")[0].checked);
    });
  });

}).call(this);
