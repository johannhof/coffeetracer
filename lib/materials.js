// Generated by CoffeeScript 1.4.0
(function () {

    this.SingleColorMaterial = (function () {

        function SingleColorMaterial(color) {
            this.color = color;
        }

        SingleColorMaterial.prototype.colorFor = function (hit, world, tracer) {
            var l, _i, _len, _ref;
            _ref = world.lights;
            for(_i = 0, _len = _ref.length; _i < _len; _i++) {
                l = _ref[_i];
                if(l.illuminates(hit.ray.at(hit.t), world)) {
                    return this.color;
                }
            }
            return world.backgroundColor;
        };

        return SingleColorMaterial;

    })();

    this.LambertMaterial = (function () {

        function LambertMaterial(color) {
            this.color = color;
        }

        LambertMaterial.prototype.colorFor = function (hit, world, tracer) {
            var l, returnColor, _i, _len, _ref;
            returnColor = this.color.mulColor(world.ambient);
            _ref = world.lights;
            for(_i = 0, _len = _ref.length; _i < _len; _i++) {
                l = _ref[_i];
                if(l.illuminates(hit.ray.at(hit.t), world)) {
                    returnColor = returnColor.add(this.color.mulColor(l.color.mulNumber(Math.max(l.directionFrom(hit.ray.at(hit.t)).dot(hit.normal), 0))));
                }
            }
            return returnColor;
        };

        return LambertMaterial;

    })();

    this.PhongMaterial = (function () {

        function PhongMaterial(diffuse, specular, exponent) {
            this.diffuse = diffuse;
            this.specular = specular;
            this.exponent = exponent;
        }

        PhongMaterial.prototype.colorFor = function (hit, world, tracer) {
            var l, pointOnRay, returnColor, spec, _i, _len, _ref;
            returnColor = this.diffuse.mulColor(world.ambient);
            pointOnRay = hit.ray.at(hit.t);
            _ref = world.lights;
            for(_i = 0, _len = _ref.length; _i < _len; _i++) {
                l = _ref[_i];
                if(l.illuminates(pointOnRay, world)) {
                    spec = this.specular.mulColor(l.color.mulNumber(Math.pow(Math.max(hit.ray.d.dot(l.directionFrom(pointOnRay).reflectedOn(hit.normal).mul(-1.0)), 0), this.exponent)));
                    returnColor = returnColor.add(this.diffuse.mulColor(l.color.mulNumber(Math.max(l.directionFrom(pointOnRay).dot(hit.normal), 0))).add(spec));
                }
            }
            return returnColor;
        };

        return PhongMaterial;

    })();

}).call(this);
