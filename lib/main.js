// Generated by CoffeeScript 1.5.0
(function() {
  var $;

  $ = jQuery;

  $(function() {
    var boxHTML, canvas, ctx, getLightHTML, getObjectHTML, height, imgData, nodeHTML, parseData, planeHTML, render, sphereHTML, width;
    nodeHTML = $("#nodeHTMLExample").html();
    sphereHTML = $("#sphereHTMLExample").html();
    boxHTML = $("#boxHTMLExample").html();
    planeHTML = $('#planeHTMLExample').html();
    $("#objectsDiv .addButton").click(function() {
      var temp;
      temp = $(this).parent().parent().append(getObjectHTML($(this).parent().children(".selectObject").val()));
      return console.log(temp.children());
    });
    getObjectHTML = function(className) {
      switch (className) {
        case "Node":
          return nodeHTML;
        case "Sphere":
          return sphereHTML;
        case "Box":
          return boxHTML;
        case "Plane":
          return planeHTML;
        default:
          return "Fail";
      }
    };
    getLightHTML = function(lightName) {
      switch (lightName) {
        case "Test":
          return "Fail";
      }
    };
    $("#goButton").click(function() {
      parseData();
      return render();
    });
    canvas = document.getElementById("mainCanvas");
    ctx = canvas.getContext("2d");
    ctx.fillStyle = "white";
    width = canvas.width;
    height = canvas.height;
    ctx.fillRect(0, 0, width, height);
    imgData = ctx.getImageData(0, 0, width, height);
    parseData = (function() {
      var cam, lights, objects, world;
      lights = [];
      objects = [new Node(Transform.Scaling(1, 1, 1), [new Sphere(new PhongMaterial(new Color(1, 0, 0), new Color(1, 1, 1), 20))], null)];
      cam = new PerspectiveCamera(new Point3(5, 5, 5), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4);
      return world = new World(new Color(0, 0, 0), objects, lights, new Color(0.1, 0.1, 0.1), 1);
    })();
    return render = (function() {
      var c, tracer, x, y, _i, _j;
      tracer = new Tracer(world);
      for (x = _i = 0; _i <= width; x = _i += 1) {
        for (y = _j = 0; _j <= height; y = _j += 1) {
          c = tracer.colorFor(cam.rayFor(width, height, x, y));
          imgData.data[(x * height + y) * 4 + 0] = c.r * 255.0;
          imgData.data[(x * height + y) * 4 + 1] = c.g * 255.0;
          imgData.data[(x * height + y) * 4 + 2] = c.b * 255.0;
        }
      }
      return ctx.putImageData(imgData, 0, 0);
    })();
  });

}).call(this);
