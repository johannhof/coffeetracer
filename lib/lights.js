// Generated by CoffeeScript 1.4.0
(function() {

  this.DirectionalLight = (function() {

    function DirectionalLight(color, castsShadows, direction) {
      this.color = color;
      this.castsShadows = castsShadows;
      this.direction = direction;
    }

    DirectionalLight.prototype.illuminates = function(point, world) {
      var hit, ray;
      if (!this.castsShadows) {
        return true;
      }
      ray = new Ray(point.subVector(this.direction.normalized().mul(50)), this.direction.normalized());
      hit = world.hit(ray);
      if (hit === null || Math.round(hit.t * 100000.0) / 100000.0 >= Math.round(ray.tOf(point) * 100000) / 100000.0) {
        return true;
      }
      return false;
    };

    DirectionalLight.prototype.directionFrom = function(point) {
      return this.direction.mul(-1);
    };

    return DirectionalLight;

  })();

  this.PointLight = (function() {

    function PointLight(color, castsShadows, position) {
      this.color = color;
      this.castsShadows = castsShadows;
      this.position = position;
    }

    PointLight.prototype.illuminates = function(point, world) {
      var hit, ray;
      if (!this.castsShadows) {
        return true;
      }
      ray = new Ray(this.position, point.subPoint(this.position).normalized());
      hit = world.hit(ray);
      if (hit === null || Math.round(hit.t * 100000.0) / 100000.0 >= Math.round(ray.tOf(point) * 100000) / 100000.0) {
        return true;
      }
      return false;
    };

    return PointLight;

  })();

  this.Spotlight = (function() {

    function Spotlight(color, castsShadows, position, direction, halfAngle) {
      this.color = color;
      this.castsShadows = castsShadows;
      this.position = position;
      this.direction = direction;
      this.halfAngle = halfAngle;
    }

    Spotlight.prototype.illuminates = function(point, world) {
      var alpha, hit, ray;
      ray = new Ray(this.position, point.subPoint(this.position).normalized());
      hit = world.hit(ray);
      alpha = Math.acos(this.direction.dot(point.subPoint(this.position)) / (this.direction.magnitude * point.subPoint(this.position).magnitude));
      if (alpha <= this.halfAngle && (this.castsShadows === false || hit === null || Math.round(hit.t * 100000) / 100000 >= Math.round(ray.tOf(point) * 100000) / 100000)) {
        return true;
      }
      return false;
    };

    Spotlight.prototype.directionFrom = function(point) {
      return this.position.subPoint(point).normalized();
    };

    return Spotlight;

  })();

}).call(this);
