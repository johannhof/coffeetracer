// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Vector3 = (function() {

    function Vector3(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.asNormal = __bind(this.asNormal, this);

      this.normalized = __bind(this.normalized, this);

      this.cross = __bind(this.cross, this);

      this.dot = __bind(this.dot, this);

      this.mul = __bind(this.mul, this);

      this.sub = __bind(this.sub, this);

      this.add = __bind(this.add, this);

      this.magnitude = Math.sqrt((Math.pow(this.x, 2)) + (Math.pow(this.y, 2)) + (Math.pow(this.z, 2)));
    }

    Vector3.prototype.add = function(v) {
      return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);
    };

    Vector3.prototype.sub = function(n) {
      return new Vector3(this.x - n.x, this.y - n.y, this.z - n.z);
    };

    Vector3.prototype.mul = function(c) {
      return new Vector3(this.x * c, this.y * c, this.z * c);
    };

    Vector3.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vector3.prototype.cross = function(v) {
      return new Vector3((this.y * v.z) - (this.z * v.y), (this.z * v.x) - (this.x * v.z), (this.x * v.y) - (this.y * v.x));
    };

    Vector3.prototype.normalized = function() {
      return this.mul(1 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z));
    };

    Vector3.prototype.asNormal = function() {
      var v;
      v = this.normalized();
      return new Normal3(v.x, v.y, v.z);
    };

    return Vector3;

  })();

  this.Normal3 = (function() {

    function Normal3(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.dot = __bind(this.dot, this);

      this.add = __bind(this.add, this);

      this.mul = __bind(this.mul, this);

    }

    Normal3.prototype.mul = function(c) {
      return new Normal3(this.x * c, this.y * c, this.z * c);
    };

    Normal3.prototype.add = function(n) {
      return new Normal3(this.x + n.x, this.y + n.y, this.z + n.z);
    };

    Normal3.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    return Normal3;

  })();

  this.Point3 = (function() {

    function Point3(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.subVector = __bind(this.subVector, this);

      this.subPoint = __bind(this.subPoint, this);

      this.add = __bind(this.add, this);

    }

    Point3.prototype.add = function(v) {
      return new Point3(this.x + v.x, this.y + v.y, this.z + v.z);
    };

    Point3.prototype.subPoint = function(p) {
      return new Vector3(this.x - p.x, this.y - p.y, this.z - p.z);
    };

    Point3.prototype.subVector = function(v) {
      return new Point3(this.x - v.x, this.y - v.y, this.z - v.z);
    };

    return Point3;

  })();

  this.Mat3x3 = (function() {

    function Mat3x3(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
      this.m11 = m11;
      this.m12 = m12;
      this.m13 = m13;
      this.m21 = m21;
      this.m22 = m22;
      this.m23 = m23;
      this.m31 = m31;
      this.m32 = m32;
      this.m33 = m33;
      this.determinant = (this.m11 * this.m22 * this.m33) + (this.m12 * this.m23 * this.m31) + (this.m13 * this.m21 * this.m32) - (this.m13 * this.m22 * this.m31) - (this.m12 * this.m21 * this.m33) - (this.m11 * this.m23 * this.m32);
    }

    Mat3x3.prototype.mulMat = function(m) {
      return new Mat3x3(this.m11 * m.m11 + this.m12 * m.m21 + this.m13 * m.m31, this.m11 * m.m12 + this.m12 * m.m22 + this.m13 * m.m32, this.m11 * m.m13 + this.m12 * m.m23 + this.m13 * m.m33, this.m21 * m.m11 + this.m22 * m.m21 + this.m23 * m.m31, this.m21 * m.m12 + this.m22 * m.m22 + this.m23 * m.m32, this.m21 * m.m13 + this.m22 * m.m23 + this.m23 * m.m33, this.m31 * m.m11 + this.m32 * m.m21 + this.m33 * m.m31, this.m31 * m.m12 + this.m32 * m.m22 + this.m33 * m.m32, this.m31 * m.m13 + this.m32 * m.m23 + this.m33 * m.m33);
    };

    Mat3x3.prototype.mulVec = function(v) {
      return new Vector3(this.m11 * v.x + this.m12 * v.y + this.m13 * v.z, this.m21 * v.x + this.m22 * v.y + this.m23 * v.z, this.m31 * v.x + this.m32 * v.y + this.m33 * v.z);
    };

    Mat3x3.prototype.changeCol1 = function(v) {
      return new Mat3x3(v.x, this.m12, this.m13, v.y, this.m22, this.m23, v.z, this.m32, this.m33);
    };

    Mat3x3.prototype.changeCol2 = function(v) {
      return new Mat3x3(this.m11, v.x, this.m13, this.m21, v.y, this.m23, this.m31, v.z, this.m33);
    };

    Mat3x3.prototype.changeCol3 = function(v) {
      return new Mat3x3(this.m11, this.m12, v.x, this.m21, this.m22, v.y, this.m31, this.m32, v.z);
    };

    return Mat3x3;

  })();

}).call(this);
