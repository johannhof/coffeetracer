// Generated by CoffeeScript 1.4.0
(function () {
    var __bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },
        __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for(var key in parent) {
                if(__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    this.Camera = (function () {

        function Camera(e, g, t) {
            this.e = e;
            this.g = g;
            this.t = t;
            this.w = this.g.mul(1.0 / this.g.magnitude).mul(-1);
            this.u = this.t.cross(this.w).mul(1.0 / this.t.cross(this.w).magnitude);
            this.v = this.w.cross(this.u);
        }

        return Camera;

    })();

    this.OrthographicCamera = (function (_super) {

        __extends(OrthographicCamera, _super);

        function OrthographicCamera(e, g, t, s) {
            this.e = e;
            this.g = g;
            this.t = t;
            this.s = s;
            this.rayFor = __bind(this.rayFor, this);

            OrthographicCamera.__super__.constructor.call(this, this.e, this.g, this.t);
        }

        OrthographicCamera.prototype.rayFor = function (w, h, x, y) {
            var a, o;
            a = w / h;
            o = this.e.add(this.u.mul(a * this.s * ((x - ((w - 1) / 2.0)) / (w - 1)))).add(this.v.mul(this.s * ((y - ((h - 1) / 2.0)) / (h - 1))));
            return new Ray(o, this.w.mul(-1));
        };

        return OrthographicCamera;

    })(Camera);

    this.PerspectiveCamera = (function (_super) {

        __extends(PerspectiveCamera, _super);

        function PerspectiveCamera(e, g, t, angle) {
            this.e = e;
            this.g = g;
            this.t = t;
            this.angle = angle;
            this.rayFor = __bind(this.rayFor, this);

            PerspectiveCamera.__super__.constructor.call(this, this.e, this.g, this.t);
        }

        PerspectiveCamera.prototype.rayFor = function (w, h, x, y) {
            var d, r;
            r = this.w.mul(-1).mul((h / 2.0) / Math.tan(this.angle / 2.0)).add(this.u.mul(x - ((w - 1) / 2.0))).add(this.v.mul(y - ((h - 1) / 2.0)));
            d = r.mul(1.0 / r.magnitude);
            return new Ray(this.e, d);
        };

        return PerspectiveCamera;

    })(Camera);

}).call(this);
